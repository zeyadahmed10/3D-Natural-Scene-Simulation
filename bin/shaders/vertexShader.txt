#version 400 core

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector; //vector that points to the source of light
out vec3 toCameraVector; //vector that point to the camera
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition; //position of light source
uniform float useFakeLighting; //we save it in float but we consider it as bool

const float density = 0.007;
const float gradient = 1.5;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCam;
	pass_textureCoordinates = textureCoordinates;
	
	vec3 actualNormal = normal;
	if(useFakeLighting > 0.5)   //check if it is necessary to make a texture use fake light we make the normal always points up towards y axis
		actualNormal = vec3(0.0, 1.0, 0.0);
		
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz; //normal changes by rotation and we put the multiplication value in the vec4 and then get xyz only
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
	
	//fog and visibility
	float distance = length(positionRelativeToCam.xyz); //distance between vertex and camera
	visibility = exp(-pow((distance * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
	
}