#version 400 core

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D modelTexture;
uniform vec3 lightColour; //the color of the light source
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal); //make the vector between 0 and 1 but leave sign
	vec3 unitLightVector = normalize(toLightVector);
	
	//diffuse light
	float nDotl = dot(unitNormal,unitLightVector); //dot product to calculate brightness number
	float brightness = max(nDotl,0.2); //take value higher or equal to 0.2
	vec3 diffuse = brightness * lightColour;
	
	//specular light
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour;
	
	//culling prob solution
	vec4 textureColour = texture(modelTexture, pass_textureCoordinates);
	if(textureColour.a < 0.5)  //remove transparent black area around transparent objects
		discard; 

	out_Color =  vec4(diffuse,1.0) * textureColour + vec4(finalSpecular,1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
}